2003-06-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.dsp : Changed to compile with files in new
		locations.

2003-06-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Made it so that if you ask for a
		video of size 0x0 it just takes whatever the default
		resolution is for the camera.
	* video_spot_tracker.cpp : Enabled the user to open directx to
		get any resolution or directx640x480 to get that specific
		resolution.  Adds a button to return it to full-screen
		video display (opposite of small_area).

2003-04-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Changing default exposure time to 80ms
		if we're using the SPOT camera -- this seems to be the
		minimum for our camera.
	* diaginc_server.cpp : Debugging to make it actually read an image.
		May or may not get the pixels in the right order.  May or
		may not do binning correctly (couldn't get on the microscope
		to test it).

2003-03-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Adding Diagnostics Inc. SPOT camera
		interface as a choice for the camera to use.
	* video_tempimager_server.cpp : Adding Diagnostics Inc. SPOT camera
		interface as a choice for the camera to use.
	* diaginc_server.h : Server for Diagnostics Incorporated SPOT cameras.
	* diaginc_server.cpp : Server for Diagnostics Incorporated SPOT cameras.

2003-03-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Added VRPN tracker to report position.

2003-03-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Declaring functions const.
	* directx_camera_server.cpp : Fixing pixel-lookup for subsetted images.
	* roper_server.cpp : Making pixel-reading work when binning.
	* spot_tracker.cpp : Changed the surround_frac to be smaller to make
		it track the center correctly.
	* stack_collector.cpp : Newline at end of file.
	* video_spot_tracker.cpp : Lots of changes.  Added mouse-based direction
		of point and radius.  Added ability to subset the display.
		Added auto-subsetting following the tracked area.  Lets you
		turn off the video display to speed things up.  Lets you
		track either dark or white spots.  Image inversion where
		needed in Y.  Debugging.  Doesn't post redisplay multiple
		times between displays.

2003-03-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * stack_collector.cpp : Made it so that you can select the region
                of interest with the mouse.  Bumped version number.

2003-03-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Adding a gain parameter when saving image.
	* roper_server.h : Same.
	* roper_server.cpp : Scales image values by gain and clips to the
		maximum value when saving.
	* stack_collecter.cpp: Added gain parameter when viewing and saving.
		Added ability to take multiple stacks.
		Changed output file to include gain and sequence #.
		Made things that should be integers truncate to do so.
		Made a new window for clipping controls.
	* video_spot_tracker.cpp : Switched to 12-bit values for Roper.

2003-02-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Fixed where the right and top lines are to
		be outside the viewed area rather than on its edge.
		Renamed the clipping controls "left, right, bottom, top."

2003-02-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_server.h : Makes it possible to access the buffer holding the
		image directly for faster access.
	* stack_collector.cpp : Provides an image preview window.  Debugged,
		but the final bug fix has not yet been tested (when the
		image is a subset of the whole possible image in X).
	* stack_collector.dsp : Same.

2002-11-24  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Modified to use new vrpn_TempImager class.
	* directx_camera_server.cpp : Same.  This involved removing a lot
		of code, which is now down inside the TempImager.
		Also inserted sleep to try and make it not eat the CPU.
	* directx_camera_server.h : Same.
	* roper_server.cpp : Making use the new vrpn_TempImager class.
		Not tested.
	* stack_collector.dsp : Enable building release version.
	* test_driectx_library.dsp : Same.
	* video_spot_tracker.cpp : Works with new vrpn_TempImager class.
	* video_tempimager_server.cpp : Same.  Took out unused code.

2002-11-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Increased sleep from 1 to 5 ms to increase read rate.
	* directx_camera_server.cpp : Uses a pair of buffers for the normal
		and inverted-in-y video that are swapped each time, rather
		than allocated a new buffer each time a frame needs to be
		swapped.  Twiddled with some loop code to move calculations
		outside the loops and use adds rather than multiplies within
		the loops.

2002-11-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Option to let the user clear the background.
	* directx_camera_server.cpp : Enables setting the video resolution.
		Prints timing information (frames/second read).
	* directx_camera_server.h : Same.
	* video_spot_tracker.cpp : Enabled hard-coding video resolution.
		It was slow when set to 640x480, so I put it back to 320x240
		until I can figure out why.
	* video_tempimager_server.cpp : Enabled setting the video resolution
		for DirectX cameras on the command line.

2002-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Modified the gain and offset settings to be clamp
		values (matches the way the Argus system works).
		Added command-line argument to tell which device to
		connect to (default is at localhost).

2002-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Changing buffers from signed to
		unsigned characters to avoid sign-extension before
		sending as 16-bit values.
	* directx_camera_server.h : Same.
	* directx_videofile_server.cpp : Same.
	* video.dsw : Adding argonot program to the file.
	* argonot.cpp : Program to enable gain and contrast adjustments to
		received video images and enable background subtraction of
		the initial image (or subtraction such that the initial image
		becomes 128 everywhere).

2002-10-27  Charalampos Fretzagias <fretzagi@cs.unc.edu>

	* base_camera_server.h : Added send_vrpn_image. This makes
		base_camera_server depend on vrpn, but does wonders for
		the speed of the server. Also removed allocation of
		memory while in the mainloop of the server; all memory
		needed is allocated just once and reused until camera
		objects are destrocted.
	* directx_camera_server.h : Same as above.
	* roper_server.h : Same as above.
	* directx_camera_server.cpp : implementation of send_vrpn_image
	* roper_server.cpp : implementation of send_vrpn_image
	* video_tempimager_server.cpp : replaced the calls to the two
		mainloop functions with a call to send_vrpn_image in the
		mainloop of the server.

2002-10-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : White space adjust.
	* roper_server.cpp : Added code to read from the Roper in continuous
		mode rather than one frame at a time; this code doesn't work
		(and neither does the example code on which it is based, it
		turns out), so this is not yet enabled.  Also optimized to
		only do open/close code at the beginning and end, not every
		frame (which sped it up marginally).
	* roper_server.h : Same.
	* roper_example.cpp : Test program from Roper manual (turns out not
		to work!)
	* roper_example.dsp : Build file for this.
	* video.dsw : Added a Roper test program.
	* video_tempimager_server.cpp : Added comments.  Changed white space.
		Moved signal handler installation to another location.

2002-10-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Swap Red and Blue to the correct order.

2002-10-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Added concept of binning.
				 Changed coordinates to unsigned from int.
				 Removed un-needed function prototypes.
	* directx_camera_server.cpp : Added debugging information.
				      Added check and new print for failure.
				      Clarified that exposure is in milliseconds.
				      Changed ints to unsigneds for coordinates.
	* directx_videofile_server.cpp : Added the filter graph to the object
		table so that DirectX graph editor can edit it.  Helpful when
		debugging failure to play some video files.  Still debugging
		that...  Trying to do single-step through video files, but can't
		get interface (other example code can...)
	* roper_server.cpp : Added support for binning.
	* video_tempimager_server.cpp : Added command-line options for exposure
		and binning, and which camera to use.

2002-10-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_server.cpp : Changes to make it work now that it is derived from
		the base camera class.
	* roper_server.h : Same.
	* video_spot_tracker.cpp : Extra debugging print.
	* video_tempimager_server.cpp : Can tell which of several cameras of the
		same type you want to start.  On the command line, you tell it
		the type of device and which to use.

2002-10-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * base_camera_server.h : Adds parameter to PPM write for 16-bit files.
        * directx_camera_server.cpp : Adds 16-bit PPM write.
                Adds the ability to pause the video (mostly for use by the derived
                class that reads from stored video files).
        * directx_camera_server.h : Same.
        * directx_videofile_server.cpp : Trying to make it work better.  It still
                skips to the end of the file when you pause.  Some streams still
                don't play past the first frame.
        * directx_videofile_server.h : Adds controls for play, rewind, pause.
        * roper_server.cpp : Adds 16-bit write for PPM files.
                Renames parameter to make sure milliseconds is explicit.
        * roper_server.h : Same.
        * spot_tracker.cpp : Adds routine to optimize in X,Y but not radius.
        * spot_tracker.h : Same.
        * stack_collector.cpp : Adds "Sixteen bits" button for image collection.
                Stops the stack in the middle if "snap" unchecked or "quit".
        * video_spot_tracker.cpp : 
                Adds play/rewind buttons for when open a video file.
        * test_directx_library.cpp : New constructor parameter.
        * video_tempimager_server.cpp : New constructor parameter.

2002-09-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Modified to use new vrpn_Analog_Output.  Not tested.

2002-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_tempimager_server.cpp : First-pass server to send video.
	* video_tempimager_server.dsp : Built file for same.
	* base_camera_server.h : Debugging and features for tempimager_server.
	* directx_camera_server.h : Same.
	* directx_camera_server.cpp : Same.
	* roper_server.h : Same.
	* roper_server.cpp : Same.
	* test_directx_library.cpp : Saves a bunch of images now.
	* video.dsw : Added build file above.

2002-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * base_camera_server.h : Base for Roper and DirectX video inputs.
	* directx_camera_server.h : DirectX video input class.
	* directx_camera_server.cpp : Same.
	* test_directx_library.cpp : Test program for above.
	* test_directx_library.dsp : Build for test program
	* roper_server.h : Modified to depend on base class.
	* roper_server.cpp : Same.
	* roper_library.dsp : Builds library for inclusion in multiple apps.
	* video.dsw : Dependency changes and new projects.


2006-07-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.cpp : Centered the disc-generation program so that
		the disc is centered on the pixel rather than at the edge.
	* make_moving_spot_video.cpp : New program to help test the spot
		tracking.
	* make_moving_spot_video.dsp : Project to build it.
	* test_spot_tracker.cpp : Comment about bias.
	* video.dsw : Added project to build the moving spot video.

2006-07-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_imager_server.cpp : Fixed a bug where it was naming the
		channels "mono", "green", and "blue".  This confused the
		poor receiver of color images.  Now it does either "mono"
		or "red, green, blue".

2006-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* add_noise_to_image.cpp : Added Gaussian noise and a camera
		offset.
	* airy_maker.cpp : Made it so that the program does not clip
		the pattern to the on-screen preview window size, but
		makes it the whole 31x31 pixels at least.

2006-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* add_noise_to_image.cpp : Modified to include Poisson shot-noise
		as well as dark current.  Also made it not use the same
		random-number seed every time unless you tell it to.

2006-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Fixed a bug where the gain and offset
		for the saved frame come from the next frame's values.

2006-07-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Switched to using the constant from
		VPRN that says how many tracker sensors there can be, rather
		than making up our own here which can't be larger than that
		one anyway.  This lets us do up to 500 sensors with the
		new setting in VRPN.

2006-06-30  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Changed the specification of brightness to be
		in terms of number of photons and photon/count in the
		image.  Changed noise to be Poisson noise on dark current
		and on photons.  Changed the way we ensure a large enough
		image size so that it also computes dark current and noise
		over the whole image.  Using the STOCC random-number
		generator to get Poisson noise, so need to add GPL info
		into a README that goes along with the installer.

2006-06-29  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Modified to make the default parameters closer
		to what is found in the Selvin test code.  Modified to make
		the minimum output file size 31x31 pixels.
	* video.dsw : Added project files for STOCC random-number
		generation library and a test program that came with it.

2006-06-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.cpp : Adding a Gaussian image, which does not
		integrate but simply point-samples.  This is to support
		the FIONA kernel.
	* image_wrapper.h : Same.
	* spot_math.h : Same.
	* spot_tracker.cpp : Switched the FIONA implementation away from doing
		integration of a Gaussian to just doing point-sampling of the
		Gaussian to match the implementation in the Selvin lab.  Also made
		the optimization function always optimize the radius, background,
		and volume within the Gaussian.
	* spot_tracker.h : Same.
	* video_spot_tracker.cpp : Same.
	* video_spot_trcker.tcl : Put FIONA interface back in.

2006-06-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Added command-line arguments that let
		you run the program and start trackers and have it log and
		then quit at the end of a file sequence.  This is to let Ty
		run it in a script harness and determine how well the
		trackers work.

2006-06-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Updated the version number for a new
		release.

2006-06-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Makes the mouse motion and clicks match
		the resized video window, so that if we're using OpenGL for
		display of the texture, everything lines up correctly.  This
		means that the user can resize the window and that images
		that are narrower than the window is wide will display
		consistently.

2006-06-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* average_videos.cpp : Removed extra M_PI definition.
	* directx_camera_server.cpp : Made it use BGR texture rather than
		RGB texture so that the colors don't swap.
	* directx_camera_server.h : Same.
	* spot_tracker.h : Made it specify the color channel to use (so that
		it didn't always track channel 0).
	* spot_tracker.cpp : Same.
	* cismm_video_optimizer.cpp : Same.
	* test_spot_tracker.cpp : Same.
	* video_spot_tracker.cpp : Same.

2006-05-26  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.cpp : Fixed problem that caused the SEM
		videos to replay very slowly on some computers (removed
		sleep call in an inner loop).
	* video_spot_tracker.cpp : Bumped version number

2006-05-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.cpp : Fixed problems that caused it to miss
		frames and also to hang up at the end of the file.
	* SEM_camera_server.h : Same.
	* video_spot_tracker.cpp : Added 3D translucent surface display
		for debugging FIONA.

2006-05-18  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.tcl : Removing FIONA control from display.
	* video_spot_tracker.cpp : Changing version number.

2006-05-09  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* spot_tracker.cpp : Fixed a bug in the radius-optimization
		code that was causing the radius always to squash down
		to size 1.
	* video_spot_tracker.tcl : Increased the size of the textbox
		for the error value.
	* video_spot_tracker.cpp : Made FIONA tracker optimize the
		radius as well as the position.

2006-05-09  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Lets it take steps between saving frames
		when it is logging.  Bumped version number to 01.03.

2006-04-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Made it write out TIFF stacks.  Still not
		the correct noise model.
	* airy_maker.dsp : Same.
	* airy_maker.tcl : Same.
	* base_camera_server.h : Comment changes.
	* file_stack_server.cpp : Same.

2006-04-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_imager_server.cpp : Added back in a command-line argument
		for swapping lines on the EDT/Pulnix, because that bug seems
		to be back in the driver sometimes.

2006-04-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Multi-threaded the trackers, so that
		it will make as many threads as there are processors.  This
		speeds up the tracking of more than one spot at a time.

2006-03-29  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Increased the number of available
		trackers in VRPN from 100 to 500.  FIONA tracker has not
		yet been debugged completely.

2006-03-27  Jeremy Cribb <jcribb@email.unc.edu>
	* glui_take.cpp:
		- Increased version number to 0.20
		- Added gain control.  Now you can adjust the gain of the camera within glui_take instead of going into pdvshow to do it.
		- Added "abort acquisition" button to interrupt data collection.
	* glui_take.qsp: updated installer file.
	* glui_take.bat: removed batch variables and replaced them with environ var.

2006-03-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Cosmetic changes.
	* image_wrapper.cpp : Added Gaussian function estimator
	* image_wrapper.h : same.
	* spot_math.cpp : Same.
	* spot_math.h : Same.
	* spot_tracker.cpp : Added FIONA Gaussian-fit tracker
	* spot_tracker.dsp : Added OpenGL linking.
	* test_spot_tracker.cpp : Added FIONA tracker.
	* test_spot_tracker.dsp : Added OpenGL linking.
	* video_spot_tracker.cpp : Added FIONA Gaussian-fit tracker
	* video_spot_tracker.tcl : Same.

2006-02-26  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Added several methods to enable direct
		rendering from cameras into an OpenGL Quad through a texture,
		which enables much faster rendering.  This lets us send a
		single channel to the graphics card for one-color cameras,
		using the OpenGL offset and scale built-in hardware and
		duplication to all three channels.  Also works for RGB
		cameras, and is faster.  Also changed the semantics of the
		send_vrpn_image so that it requires a separate read call to
		the camera.
	* base_camera_server.h : Same.
	* cooke_server.h : Same.
	* cooke_server.cpp : Same.
	* diaginc_server.h : Same.
	* diaginc_server.cpp : Same.
	* directx_camera_server.h : Same.
	* directx_camera_server.cpp : Same.
	* edt_server.h : Same.
	* edt_server.cpp : Same.
	* file_stack_server.h : Same.
	* file_stack_server.cpp : Same.
	* nikon_server.h : Same.
	* nikon_server.cpp : Same.
	* roper_server.h : Same.
	* roper_server.cpp : Same.
	* SEM_camera_server.h : Same.
	* SEM_camera_server.cpp : Same.
	* video_spot_tracker.cpp : Makes use of the faster OpenGL rendering,
		and modified the bit-shifting code to be consistent between
		different bit-depth cameras.
	* video_imager_server.cpp : Modified to read from the camera before
		sending its image via the VRPN imager server.
	* cismm_video_optimizer.cpp : Modified to still work with the changes
		made.  Not yet optimized to use them.

2006-02-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Added Cooke camera.
	* cooke_server.cpp : Bug fixes; this version has consistent
		behavior when binning and also avoids crashing at
		exit.
	* cooke_server.h : Same.
	* video.dsw : Added Cooke server.
	* video_imager_server.cpp : Same.
	* video_spot_tracker.cpp : Same.

2006-02-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Added some noise creation into the imaging
		process.  It isn't done yet, shot noise is not complete.
	* diaginc_server.cpp : Took out a large commented-out block.
	* roper_server.cpp : Error message fixed.
	* cooke_server.h : Added class to drive a Cooke camera using the
		PCO library.
	* cooke_server.cpp : Same.
	* cooke_server.dsp : Same.
	* video.dsw : Added Cooke camera server.
	* video_spot_tracker.cpp : Same.
	* video_imager_server.cpp : Same.
	* video_imager_server.dsp : Same.

2006-02-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Removes VRPNLogToMatlab installer; it
		is now available as a separate package with its own
		version number. Rearranged the GUI elements to keep from
		making the left panel too long. Consolidated the logging
		control panel into the kernel control panel. Made round
		cursors the default, now that we have such nice ones. :-)
		Turns off tracking and deletes traces when rewind is pushed.
		This was requested by a user to be the behavior, and it
		certainly seems likely to be the common case. Made the "round
		cursor" option for the rod3 tracker display something useful.
		In this case, a rectangle with lines coming in. 
	* video_spot_tracker.tcl : Same.

2006-02-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_imager_server.cpp : This wasn't calling mainloop()
		on the connection object.  Now it does.  Version 2.3.
		Strangely, this only showed up when the remote side
		requested logging.

2006-02-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Adds a trace of the logged bead positions
		that can be drawn over the video image.

2006-01-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Adds "Thank-you Ware" button.

2006-01-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Adds "Thank-You Ware" button.

2005-12-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Makes the display slightly faster by
		caching calculations.

2005-12-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Added a pixel read function to
		the imager base class that lets easily swap out
		cameras for imagers in spot tracker.
	* video_spot_tracker.cpp : Made the video display faster using
		smarter pointer arithmetic.  Added the ability to subtract
		an average background image from the image on which tracking
		is occuring.

2005-12-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Allows saving monochrome TIFF images.
	* base_camera_server.cpp : Same.
	* cismm_video_optimzer.cpp : Same.
	* cismm_video_optimizer.tcl : Same.

2005-12-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Turned the RGB slider into a set of
		radiobuttons, moved the description of them into the
		Tcl file.
	* video_spot_tracker.tcl : Same.
	* cismm_video_optimizer.cpp : Same.
	* cismm_video_optimizer.tcl : Same.

2005-12-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Now calculates an image based on the current
		parameter settings and then uses that image for display
		purposes both in the bar graph and in the simulated image.
	* airy_maker.tcl : Made a big "Quit" button.
	* spot_math.h : Moved an Airy integration function into this
		file, so that it can be shared by other programs.

2005-12-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Adds a display of the brightness image,
		including the addition of noise to the image -- both
		uniform noise and noise scaled by the brightness of
		each pixel.
	* spot_math.h : Modified to do a better job at handling
		cases near the center of the sample space.

2005-11-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* average_videos.cpp : This version works, with multiple files
		named on the command line.  It also has an option (not
		exposed in the installed shortcut) that lets you say
		how many frames to average from each of the following
		files on the command line.

2005-11-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Moved the display code out of the
		loop-in-Y code, making it a lot faster.  What a stupid bug.
		Updated version number to 1.09.
	* average_videos.cpp : New application to compute the average frame
		from a video or series of TIFF files.  It isn't quite done in
		this version.
	* average_videos.dsp : Project file to build the above.
	* video.dsw : Added the above project.

2005-08-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* edt_library.dsp : Modified to look on the system drive for
		libraries, not the C: drive.
	* video_imager_server.cpp : Changed the version number to 2.2
	* video_spot_tracker.dsp : Set it to look in system drive for
		include files rather than C:

2005-08-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_server.cpp : Modified to handle binning with VRPN Imager.
	* video_imager_server.bat : Modified to send multiple parameters if
		they exist.
	* video_imager_server.qsp : Builds version 02.00.

2005-07-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Fixed a bug in the reorientation code.
		Updated version number to 1.08.

2005-07-19  Jeremy Cribb <jcribb@email.unc.edu>
	glui_take.dsp : 
		- changed configuration to include vrpn headers and vrpn.lib.
	glui_take.cpp : 
		- changed timestamps to UTC format.  Output text file is now 
		  similar to vrpn-log output.
		- made interface more friendly by removing desired number of
			frames and number of frames to skip.  Instead the user inputs
			the desired duration for frame capture and the desired frame-rate
			from a selection.

2005-07-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * GLUItake.dsp : Switching over everything to use the compiled
		version of ImageMagick which has static linkage and does not
		require an installed ImageMagick library.  Also, modifying all
		of the preprocessor paths and include paths to point at
		external in C:\nsrg rather than relative paths.  Also, removing
		extra entries in these lists that used to be needed.
        * airy_maker.dsp : Same.
        * argonot.cpp : Same.
        * argonot.dsp : Same.
        * base_camera_server.dsp : Same.
        * cismm_video_optimizer.dsp : Same.
        * diaginc_library.dsp : Same.
        * edt_library.dsp : Same.
        * edt_raw_video_store.dsp : Same.
        * file_stack_library.dsp : Same.
        * file_stack_server.h : Same.
        * imager_directx_dll.dsp : Same.
        * make_test_image.cpp : Same.
        * make_test_image.dsp : Same.
        * manual_capture.dsp : Same.
        * roper_example.dsp : Same.
        * roper_spot_tracker.dsp : Same.
        * stack_collector.dsp : Same.
        * swap_ppm_lines.dsp : Same.
        * test_directx_library.dsp : Same.
        * test_spot_tracker.dsp : Same.
        * video_imager_server.dsp : Same.
        * video_spot_tracker.dsp : Same.

2005-07-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Fixed a bug that caused positions to be
		logged to the logfile when a tracker is lost.  Version 4.02.

2005-07-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nikon_camera.dsp : Adds a project to build controls for Nikon
		cameras.  Does not yet compile, but wanted to check in before
		other changes made.  This is for controlling the D1 and D2X
		cameras that are used by the Rheology mixing group.
	* nikon_server.cpp : Same.
	* nikon_server.h : Same.
	* video.dsw : Same.

2005-07-14  Jeremy Cribb <jcribb@email.unc.edu>

* glui_take.cpp : 
		- Incremented VERSION_STRING to 0.11 from 0.10a.
		- Added feature for saving timestamps via EDTpdv function call to 
		  pdv_wait_image_timed.  Timestamps are accumulated while images 
			are streamed to the disk and then saved in a separate file.  
			The physical value of the timestamps are in seconds since bootup.
			Using vrpn_gettimeofday would be better and will be used soon.
		- Added informational text describing software version and 
			camera parameters.
	* glui_take.bat :
		- Added this batch file that loads the camera configuration and
			initializes the camera before starting glui_take.cpp.

2005-07-08  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.cpp : Removed Synchronized from VRPN connections.
	* SEM_camera_server.h : Same.
	* diaginc_server.cpp : Same.
	* directx_camera_server.cpp : Same.
	* edt_server.cpp : Same.
	* file_stack_server.cpp : Same.
	* file_stack_server.h : Same.
	* roper_server.cpp : Same.
	* stack_collector.cpp : Same.
	* video_spot_tracker.cpp : Same.

2005-06-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Modified to use an unsynchronized VRPN
		connection, which has been removed from VRPN.
	* diaginc_server.h : Same.
	* directx_camera_server.h : Same.
	* edt_server.h : Same.
	* roper_server.h : Same.
	* video_imager_server.cpp : Same.

2005-05-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_videofile_server.cpp : Fixed error messages (copy/paste
		error left wrong class name).
	* video_spot_tracker.cpp : Added a bit "Quit" button, rather than
		the small check-box hidden down in the "Sea of Tcl".  Also
		added a "tell if I'm lost" feature that stops the tracking
		when a tracker has too small of a signal on a bead.
	* lost.wav : The sound it plays when it gets lost.

2005-04-29  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Adds a field that controls how many
		images are taken at one focal plane and another that
		sets the minimum delay between images.
	* stack_collector.tcl : Same.
	* video_imager_server.cpp : Comment changes.

2005-04-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* mcl.cfg : Edited to work correctly, had a bug before in
		the arguments to the MCL control.
	* stack_collector.cpp : Moved a lot of the interface into
		a TCL script.  Made it work with the MCL stage as well
		as the Nikon stage.  Made it work with the Pulnix
		camera.  Tested it running on Hercules with installer.
	* stack_collector.tcl : Same.
	* video_spot_tracker.cpp : Start of changes to include a
		"I think I'm lost" function.  For now, just printouts
		that need to be disabled again later.  Also moved "Quit"
		button into TCL script.
	* video_spot_tracker.tcl : Same.

2005-02-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Version number change to match
		documentation change.
	* video_imager_server.cpp : Changed the name of the sent stream
		from "red" to "mono" so it will show up in all three
		channels in the default reader.

2005-02-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Modified so that it uses a remote
		Tracker and Poser object on top of an Analog and
		AnalogOut object to drive either a Nikon base or
		the Mad City Labs stage.  The MCL code does not yet
		let you control the stage position from within the
		program, so focus control on Nikon needs to be used
		to set up.
	* nikon.cfg : Configuration file to run a VRPN server that
		wraps a Nikon with an appropriate Poser and Tracker.
	* mcl.cfg : Configuration file to run a VRPN server that
		wraps a pair of National Instruments boards with
		appropriate Tracker and Poser for positioning.
	* stack_collector.dsp : Modified to build new version.

2005-01-24  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Version 4.00.  Changes the output
		format for CSV files to include frame number from video
		rather than time at which the info was saved: time was
		not with respect to video frame time before, so this is
		an improvement.  Adds an Analog to the VRPN file to tell
		the frame number.

2005-01-20  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Version 2.01. Watches for focus change
		during preview.  Lets the user specify a minimum time
		lapse between stacks.

2005-01-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.cpp : Modified the VRPN send method to take
		an additional parameter that is the number of channels to
		send.
	* SEM_camera_server.h : Same.
	* base_camera_server.h : Same.
	* base_camera_server.cpp : Same.
	* diaginc_server.h : Same.
	* diaginc_server.cpp : Same.
	* diaginc_server.h : Same.
	* directx_camera_server.h : Same.
	* directx_camera_server.cpp : Same.  Also added code to let it
		send 2 or 3 channels (r,g,b) from the camera.
	* edt_server.h : Same.
	* edt_server.cpp : Same.
	* file_stack_server.h : Same.
	* file_stack_server.cpp : Same.
	* roper_server.h : Same.
	* roper_server.cpp : Same.
	* video_tempimager_server.h : Same.  Also added code to decide the
		maximum value based on the camera.  Also added code to have it
		write 3 channels from the DirectX camera server.

2004-12-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Added EDT camera control, so I can
		try this with the Pulnix and see how fast it is.

2004-12-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* edt_server.cpp : Fixed error message.
	* roper_server.cpp : Added Roper SPE stack file reader.
	* roper_server.h : Same.
	* video_spot_tracker.cpp : Same.
	* video_spot_tracker.tcl : Same.

2004-12-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* EDT_directx_dll.cpp : Print statement made clearer.
	* SEM_camera_server.cpp : Added frame begin/end.
	* directx_camera_server.cpp : Same.
	* edt_server.cpp : Same.
	* file_stack_server.cpp : Same.
	* roper_server.cpp : Same.
	* SEM_camera_server.h : Switched from TempImager to Imager.
	* argonot.cpp : Same.
	* base_camera_server.h : Same.
	* diaginc_server.h : Same.
	* directx_camera_server.h : Same.
	* edt_server.h : Same.
	* roper_server.h : Same.
	* file_stack_server.h : Same.
	* roper_server.h : Same.
	* diaginc_server.cpp : Added code to send over Imager.
	* imager_direcdtx_dll.cpp : Moved from tempimager_directx_dll.cpp
	* imager_direcdtx_dll.dsp : Moved from tempimager_directx_dll.dsp
	* make_test_image.dsp : Told where to find vrpn.lib
	* manual_capture.cpp : Added VRPN_CALLBACK
	* video.dsw : Changed tempimager projects to imager projects

2004-11-19  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Override the default copy
		constructor on the copy_of_image class so that
		it does a deep copy.  Added an everaged_image
		class that averages two images.
	* base_camera_server.h : Same.
	* cismm_video_optimizer.tcl : Added a control to subtract
		the average of neighboring images from the current
		image (attempt at Z sharpening).
	* cismm_video_optimizer.cpp : Same.
	* edt_library.dsp : Removed file not needed in new
		version (3.3.3.5) of the EDT library.
	* edt_server.cpp : Implemented the code to send a
		message on a VRPN connection.
	* edt_server.h : Changed the swap-lines default parameter
		to false, because this bug was fixed in version
		3.3.3.5 of the EDT library.
	* video.dsw : Changed dependencies.
	* video_tempimager_server.cpp : Added EDT as a camera type.

2004-11-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Added virtual destructors to
		remove memory leak.
	* base_camera_server.h : Same.
	* cismm_video_optimizer.cpp : Shifts the image intensities
		for 8-bit file saves so that they match what is shown
		on the screen.
	* cismm_video_optimizer.tcl : Moved the initial location of
		the imagemix control panel.

2004-11-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Making the code to turn on and
		off collection of min/max/mean a bit more clever so that
		it can be left off as desired.

2004-11-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Added code for auto gain control.
		Handled the case where the user turns off the gathering
		of statistics that are being used by turning off their
		use at the same time.
	* cismm_video_optimizer.tcl : Added code for auto gain control.

2004-11-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Added new methods to base classes so
		that they can be used more widely.  Added new image-subtract
		class.  Added various image-statistic classes (min, max,
		and mean).
	* base_camera_server.h : Same.
	* cismm_video_optimizer.cpp : Added code to compute image
		statistics (min, max, mean) and view them.  Added code
		to let the user subtract single frames, min, max, or
		mean frames from the video.
	* cismm_video_optimizer.tcl : Same.

2004-11-11  Jeremy Cribb  <jcribb@email.unc.edu>
  * GLUItake.dsp : added.  MS Visual Studio project file for GLUItake 
    video capture software for EDT boards.  Using this you can capture
    at 120 fps and see live video at 30 fps before, during, and after 
    fast capture.
  * glui_take.cpp : added.
  * video.dsw : added GLUItake project to workspace.

2004-11-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* cismm_video_optimizer.cpp : Beginning of code to let users
		specify a subtraction image and image-based operations
		like on the Argus.
	* cismm_video_optimizer.tcl : Same.
	* video_spot_tracker.cpp : Made the video controls run right
		after the Tcl code to avoid timeouts.  Added code to
		say "Done with video" and pause at the end of a video.
		Let the kymograph run even when the trackers are not
		optimizing.

2004-11-09  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Code to create radially-averaged
		spread functions (PSF) and save them into files.
	* base_camera_server.h : Same.
	* cismm_video_optimizer.cpp : Code to create and save PSF
		files along with optimized stacks.
	* cismm_video_optimizer.tcl : Same.
	* file_list.cpp : Enables the numbers to be unsigned longs, so we
		can catch a wider range of files.
	* file_stack_server.h : Put the default location for the
		ImageMagick library in the constructor.
	* manual_capture.C : Added "VRPN_CALLBACK" so it will compile.
	* spot_tracker.cpp : Changed spot_tracker base class name
		to spot_tracker_XY, and added a spot_tracker_Z base
		class.  Added a radial_average_tracker_Z that is a
		concrete Z tracker.
	* spot_tracker.h : Same.
	* test_spot_tracker.cpp : Added code to test the Z tracker.
	* spot_tracker.dsp : Added new libraries and includes needed for
		the new Z tracker.
	* video.dsw : Added dependency.
	* video_spot_tracker.cpp : Added the ability to track in Z, and
		added Z value to display and log files.
	* video_spot_tracker.tcl : Same.
	* video_tempimager_server.cpp : Added ability to save a log file.

2004-11-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Added "VRPN_CALLBACK" as needed by new version.
	* base_camera_server.cpp : added offset parameter to the file
		save, so that offset and scaling could both be done on
		the way to the saved file.
	* base_camera_server.h : Same.
	* cismm_video_optimizer.cpp : Added contrast and brightness
		controls.
	* cismm_video_optimizer.tcl : Same.
	* directx_library.dsp : Pointed at project file on D: rather than C:.
	* test_directx_library.dsp : Same.
	* video_tempimager_server.cpp : Added directx640x480 option.
	* video_tempimager_server.dsp : Changes to compile in current env.

2004-10-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Added code to enable cropping of
		an image.  Comment fixes.
	* base_camera_server.h : Added code to enable cropping of an image.
		Fixed the affine-transformed image to do the right thing
		(math bug).
	* cismm_video_optimizer.cpp : Lets you log 8-bit images.  Removed
		reduntant imager object.  Added the ability to crop the
		image.
	* cismm_video_optimizer.tcl : Added control for 8-bit image saves.
	* SEM_camera_server.cpp : Modified to check for less than rather
		than less-or-equal when comparing initial region.
	* diaginc_server.cpp : Same.
	* directx_camera_server.cpp : Same.
	* edt_server.cpp : Same.
	* file_stack_server.cpp : Same.
	* roper_server.cpp : Same.

2004-09-30  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.h : Removed a dangerous method.
	* diaginc_server.h : Same.
	* roper_server.h : Same.
	* base_camera_server.cpp : Fixed the method that stores to
		a TIFF file so that it gets the correct offset.
	* base_camera_server.h : Comment changes.
	* edt_server.cpp : Added a server for a live connection to
		a camera on an EDT board.
	* edt_server.h : Same.
	* file_list.cpp : Made it search for offsets of up to 1000
		in the file names.
	* stack_collector.bat : Fixed formatting, added needed path
		and arguments.
	* stack_collector.cpp : Made it read from all available cameras
		rather than just the Roper.  Also made it possible to
		use a remote Nikon control.  Other major changes.
	* stack_collector.dsp : Made to link with new needed things.
	* video.dsw : Added dependencies.
	* video_spot_tracker.cpp : Removed the imager class, which is
		now redundant with the camera as they are derived from
		the same class.

2004-09-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* spot_tracker.cpp : Adds a parabolic really-fast tracking
		optimization technique that fails spectacularly.
		Adds a much-faster twolines_ version of the image-based
		spot tracker that is much faster and seems to be almost
		as robust as the full-image one.
	* spot_tracker.h : Same.
	* video_spot_tracker.cpp : Puts the faster image spot tracker
		in, swapping it out for the slower one.  Now logs the
		last frame's tracker positions when the program is quit
		or log-file closed.  Adds the ability to do velocity-
		based prediction on tracker position updates that lets
		us really reduce the radius for the jump_test kernel
		and improve tracking speed.
	* video_spot_tracker.tcl : US code for the above changes.

2004-09-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.cpp : Returns black outside of image borders
		when resampling image, rather than garbage.
	* base_camera_server.h : Same.  Adds translated image and affine
		transformed image classes.  Not yet completely optimized
		for speed.
	* cismm_video_optimizer.cpp : Adds a second tracker and the option
		to optimize orientation and/or scale along with translation.
	* cismm_video_optimizer.tcl : Same.
	* file_list.cpp : Will find a file set even if the block of numbers
		that index it is not the last block of numbers in the file
		name.
	* file_list.h : Same.
	* video_spot_tracker.cpp : Adds Jpeg to the file types loaded.

2004-09-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Checked to make sure it does not try
		to create too many trackers.  If it tries, then it just
		stops trying (it used to make them and then not log them).
		Also, avoids resetting the tracker IDs when the user
		switches kernel type.
	* SEM_library.dsp : Switched back to DLL code generation.
	* airy_maker.dsp : Same.
	* argonot.dsp : Same.
	* diaginc_library.dsp : Same.
	* directx_library.dsp : Same.
	* edt_library.dsp : Same.
	* edt_raw_video_store.dsp : Same.
	* file_stack_library.dsp : Same.
	* make_test_image.dsp : Same.
	* roper_example.dsp : Same.
	* roper_library.dsp : Same.
	* roper_spot_tracker.dsp : Same.
	* spot_tracker_library.dsp : Same.
	* stack_collector.dsp : Same.
	* swap_ppm_lines.dsp : Same.
	* tempimager_directx_dll.dsp : Same.
	* test_directx_library.dsp : Same.
	* test_spot_tracker.dsp : Same.
	* video_spot_tracker.dsp : Same.
	* video_tempimager_server.dsp : Same.

2004-09-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Modified this so that the camera base
		class derives from image_wrapper, to avoid duplicating
		code and excessive subclassing.  Added classes to make
		a copy of an image and to transform an image.
	* base_camera_server.cpp : Implements above code.
	* file_stack_server.h : Same.
	* image_wrapper.cpp : Code moved and adjusted per above.
	* image_wrapper.h : Same.
	* SEM_camera_server.h : Updated to use new camera base class.
	* SEM_library.dsp : Same.
	* airy_maker.dsp : Same.
	* diaginc_library.dsp : Same.
	* diaginc_server.h : Same.
	* directx_library.dsp : Same.
	* edt_server.h : Same.
	* file_stack_library.dsp : Same.
	* base_camera_server.h : Same.
	* roper_library.dsp : Same.
	* roper_server.h : Same.
	* roper_spot_tracker.cpp : Same.
	* roper_spot_tracker.dsp : Same.
	* spot_tracker_library.dsp : Same.
	* stack_collector.dsp : Same.
	* test_spot_tracker.dsp : Same.
	* video.dsw : Same.
	* video_spot_tracker.dsp : Same.
	* file_stack_server.cpp : Comment changes.
	* video_spot_tracker.bat : Put back into DOS format.
	* video_spot_tracker.cpp : Big changes to swap over to the new
		base_camera_server class and image_wrapper (removed a bunch
		of derived classes.
	* video_spot_tracker.tcl : Removed ".stk" as a suffix.

2004-09-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Incremented version number for release.
	* video_spot_tracker.html : Added information for changes up to
		version 3.02.  Updated description to include new features.
	* GUI.jpg : New image of modified control panel.
	* kernel.jpg : Same.

2004-09-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_library.dsp : Modified to use non-DLL code generation.
	* airy_maker.dsp : Same.
	* argonot.dsp : Same.
	* diaginc_library.dsp : Same.
	* directx_library.dsp : Same.
	* edt_library.dsp : Same.
	* edt_raw_video_store.dsp : Same.
	* file_stack_library.dsp : Same.
	* make_test_image.dsp : Same.
	* roper_example.dsp : Same.
	* roper_library.dsp : Same.
	* roper_spot_tracker.dsp : Same.
	* spot_tracker_library.dsp : Same.
	* stack_collector.dsp : Same.
	* swap_ppm_lines.dsp : Same.
	* tempimager_directx_dll.dsp : Same.
	* test_directx_library.dsp : Same.
	* test_spot_tracker.dsp : Same.
	* video_spot_tracker.dsp : Same.
	* video_tempimager_server.dsp : Same.
	* file_list.h : Turned off warning about too-long debug symbols.
	* file_stack_server.cpp : Created compile-time flag USE_METAMORPH
		to determine whether it tries to compile in new code that
		can read Metamorph files directly.  New class to do this.
		The new class does not yet work (it doesn't understand the
		specialized tags and doesn't know how to parse the data).
	* file_stack_server.h : Same, plus comment changes and turning
		off compile-time warning for too-long symbols.
	* spot_tracker.cpp : Computes variance across rings, part of
		a failed attempt to make the symmetric spot tracker
		have a larger capture radius.
	* spot_tracker.h : Whitespace change.
	* stack_collector.cpp : Comment change.
	* video_spot_tracker.bat : Can't see any change.
	* video_spot_tracker.cpp : Added configuration section to turn
		on and off which external libraries are being used.  Added
		entries for ROPER and METAMORPH.  Made the program never
		re-use an index for a tracker that has been deleted.  This
		avoids confusion in the analysis process.
	* video.dsw : Added project file for manual_capture.
	* video_spot_tracker.html : Added comment about Windows XP SP2
		firewall complaining when the program is run.

2004-08-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* file_stack_library.dsp : Making things compile with most stuff
		installed on D: rather than C: due to hard drive crash.
	* roper_library.dsp : Same.
	* video_spot_tracker.dsp : Same.
	* video.dsw : Same.  Added project file for test image program.
	* image_wrapper.cpp : Extra error checking.  Changes in the way
		the disc test image is made to support oversampling.
		New "Copy_of_image" class that will copy itself from
		any wrapped class and then report the copied values.
		This is used for the image-based tracker.
	* image_wrapper.h : Same.
	* spot_tracker.cpp : Made a new image-based spot tracker that
		does least-squares differences between two images to
		determine the error.  This is used by the new code in
		the video spot tracker program that tries to follow
		bead jumps between frames.
	* spot_tracker.h : Same.
	* video_spot_tracker.cpp : Turned off compiler warning about too-long
		symbol names.  Changed the way the kernel is chosen so that
		it uses a switch statement rather than a set of checkboxes.
		Moved some GUI code into the Tcl script from the C code.
		Added code to do image-based search for maximum within one
		radius of a bead, so that it could track faster bead motion.
		Added frame-number counter when using video.
	* video_spot_tracker.tcl : Moved some GUI code into here, made the
		kernel window display clearer.

2004-03-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* diaginc_library.dsp : Making it build without the ..\external dir.
	* file_stack_library.dsp : Same.
	* video_spot_tracker.dsp : Same.
	* video_spot_tracker.html : that to the.

2004-03-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* Tcl_Linkvar.C : Making sure that strings don't get written past
		the allocated space.
	* Tcl_Linkvar.h : Comments added.
	* edt_server.cpp : Inverting the image to match what is seen on the
		preview program that comes with the board.
	* file_list.cpp : Changed to work when given a file that has no
		numbers in it.
	* file_stack_server.cpp : Modified to work properly with either 8
		or 16-bit input files.
	* kernel.jpg : New image for web manual.
	* log.jpg : Same.
	* video_spot_tracker.cpp : Inverted the handling of Y throughout
		the program to avoid flipping everything over twice.
		Changed the output values for Y so that they are indexed from
		the upper-left corner rather than the lower-left corner.
		Made the program work when it has no trackers, and not have
		one when it starts.  Changing the Tcl X and Y variables to
		be output-only, to avoid truncating the position stored in
		the log file.  Made it possible to delete the active tracker
		using Delete and Backspace keys.  Made it possible to quit
		by pressing Q or q.  Changed the way the mouse buttons and
		drags work: left now creates new ones and sets radius;
		right now drags the nearest one around on the screen.  Moved
		the windows around to fit on the screen better with all the
		new controls.
	* video_spot_tracker.html : Updated to describe all of the above
		changes.
	* video_spot_Tracker.tcl : Moved windows around, changed where
		controls are located.

2004-03-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* file_stack_server.cpp : Updated to use the 16-bit build of
		ImageMagick 5.5.7.
	* file_stack_server.h : Same.
	* video_spot_tracker.cpp : Same.  Also added a slider to control
		the shift in the displayed image based on the bit depth.
	* video_spot_tracker.html : Updated to describe new version and
		new features.
	* GUI.jpg : Updated with the new control panel image.
	* video_spot_tracker.tcl : Updated to let the user select a TIFF or
		BMP file instead of an AVI file if they want.

2004-03-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* file_list.h : Function to produce a list of the files in a
		directory that are in a numbered sequence given
		the name of one of the files.
	* file_list.cpp : Same.
	* file_stack_server.h : Image server that reads a stack of
		images and spits them out as if they were a video.
		Currently only works with 8-bit images because it
		links with the nano-compiled version of ImageMagick.
	* file_stack_server.cpp : Same.
	* video.dsw : Adding project to read image stacks
	* video_spot_tracker.cpp : Same

2004-03-02  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_videofile_server.cpp : Make the destructor and the
		rewind buttons each wait for the filter graph to
		finish (by reading an extra frame).  This prevents
		the code from hanging when it is rewound or quit
		while playing and tracking.
	* video_spot_tracker.cpp : Makes the program exit cleanly when
		the OpenGL window is closed, and when the one of the initial
		Tcl/Tk windows are closed.  Should also exit somewhat
		cleanly if the job is killed some other way.
	* video_spot_tracker.html : Described the changes, bumped the
		version number.

2004-02-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Modified to use a new version of the
		VRPN File Connection that is able to avoid preloading
		the file and avoid loading it all into memory.
	* video_spot_tracker.html : Updated version number and comments.

2004-02-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Fixed crashing bug when running without
		telling it what file to open.
	* video_spot_tracker.html : Same.
	* video_spot_tracker.tcl : Same.

2004-02-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Fixed crashing bug when saving CSV file.
	* video_spot_tracker.html : Bumped version number.

2004-02-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.html : Updated to describe kymograph.
	* kymo_graph.jpg : Same.
	* kymo_main.jpg : Same.
	* kymo_trace.jpg : Same.

2004-02-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Added code to draw a center-of-spindle
		graph along with the kymograph.  Renamed kinograph to
		kymograph throughout.  Added chartjunk for spindle tracking
		when the kymograph is turned on.
	* image_wrapper.h : Added a cone-generating image sample generator.
	* image_wrapper.cpp : Same.
	* test_spot_tracker.cpp : Same.

2004-01-31  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Fixed a bug that made it complain
		about not having a CSV file open when it wasn't supposed
		to.  Added a Kinograph function that displays the
		line of the image through two tracked points.

2004-01-30  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* GUI.jpg : Updated picture to newer version.
	* kernel.jpg : Same.
	* spot_tracker.cpp : Added a new rod3 kernel that includes three
		kernels in a line that move as one rigid unit.  This is
		intended to let the user track rods in the image.  It
		can use any of the other kernels as subkernels.  Refactored
		some of the code to use accessor methods rather than
		direct reads so that the proper side effects occur.
	* spot_tracker.h : Same.
	* video_spot_tracker.cpp : Added support for control and reading
		of the rod parameters.  Modified rewind so that it first
		pauses, which is hoped to cure a problem with the program
		hanging on rewind for DirectX files.  Added code to save
		.csv files as well as .vrpn files when logging.
	* video_spot_tracker.dsp : Same.
	* video_spot_tracker.html : Updated to new version.
	* video_spot_tracker.tcl : Updates to GUI to support above changes.

2004-01-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* SEM_camera_server.cpp : Code needed to parse the VRPN-format
		files that contain information from an SEM interface.
		This is to let us read the optical images taken during
		manipulations with the nanoManipulator + optical
		system, which uses an SEM interface to talk to the nM.
	* SEM_camera_server.h : Same.
	* SEM_library.dsp : Same.
	* video_spot_tracker.cpp : Added code to handle SEM VRPN data
		produced by the optical image server.  Modified the code
		that logs so that it stores the value for a frame just as
		the user leaves the frame, enabling single-stepping through
		the frames and fixing the positions of any trackers that get
		lost due to rapid motion.  Added a client_tracker so that
		log files will have acknowledgements of the tracker server
		in them.
	* video_spot_tracker.dsp : Added parameters needed to compile with
		the SEM library.
	* video_spot_tracker.html : Updated to version 25, described the
		logging differences.
	* video_tempimager_server.dsp : Added parameters needed to compile
		with teh SEM library.
	* video.dsw : Added SEM projects and other projects needed to
		read from SEM VRPN files.

2003-12-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Adds debug windows to show a
		tracker's-eye view of the bead being tracked and
		a map and graph of the optimization landscape
		surrounding the current point.

2003-12-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.h : Fixed interpolation code.
	* video_spot_tracker.cpp : Added window to watch the spot from
		the tracker point of view (#ifdef'ed out).  Bumped the
		version number.

2003-12-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Bumped version number.

2003-12-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* spot_tracker.h : Modified trackers so that you can specify the
		density with which they sample the image.  Default is
		1-pixel spacing.
	* spot_traccker.cpp : Same.
	* video_spot_tracker.cpp : Same.  Bumped version number.

2003-11-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.html : Updated to reflect recent changes.
	* GUI.jpg : Needed for the updated web page manual.
	* small_area.jpg : Same.
	* video_spot_tracker.cpp : Updated version number.
	* roper_example.cpp : Trying to make it work to no avail.
	* roper_server.cpp : Trying to make it work in circular-buffer
		mode, to no avail.

2003-11-22  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_example.cpp : Hiding the printf so we could see first
		messages.
	* roper_server.cpp : Modifying comments and error messages.
		Making it send the upper 8 bits of the 12-bit values
		read from the camera, rather than the lower 8.
	* video_tempimager_server.cpp : Updated version number.

2003-11-19  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* edt_server.h : Class to read from raw Pulnix files gotten through
		the EDT writer.
	* edt_server.cpp : Same.
	* edt_library.dsp : Same.
	* video_spot_tracker.cpp : Same, plus refactoring to enable multiple
		types of replayable files (not just DirectShow).
	* base_camera_server.h : Whitespace changes.

2003-11-18  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker : Installer for the Airy-disk maker program.
	* airy_maker.cpp : Adds sqrt() display above Airy cross-section.
		Draws cross-hairs to show pixel center.
	* video_spot_tracker.cpp : Adds option to tag tracked spots using
		larger circles around them rather than cross-hairs through
		them.  Tags each tracked marker with a number that matches
		their sensor number in the VRPN log file.

2003-11-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Shows probability distribution within the pixels
		by comparing volume within each to total volume under the
		Airy disc.  Lets the user adjust the offsets for the
		Airy disk with the mouse.
	* roper_server.cpp : Cosmetic and warning-removing.

2003-11-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airy_maker.cpp : Set range on slider to be larger.  Changed the
		way things are drawn to pull everything into one display
		routine for the pixel-vs-airy image.  Draws the pixel-vs-
		airy for both X and Y.
	* roper_server.cpp : Fixes the stride calculations.
	* video_spot_tracker.cpp : Adds a parameter to control the
		resolution to which the tracker tracks.
	* test_spot_tracker.cpp : Removed un-needed include.

2003-11-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* airey_maker.cpp : Code to build an airy disk and lay it out with
		respect to pixels.
	* airey_maker.dsp : Same.
	* airey_maker.tcl : Same.
	* spot_math.cpp : Same.
	* spot_math.h : Same.
	* image_wrapper.h : Added read_pixel_nocheck() method needed to
		instantiate an instance of the object.  Added math.h for
		floor().
	* image_wrapper.cpp : Same.
	* roper_example.cpp : Prettified, edited to test more things.
	* roper_server.cpp : Fixed several bugs in the server involving
		how binning works and sending data over a VRPN connection.
		Hacked it to send bytes rather than shorts; it wraps when
		too bright, but can be read by the 3DFM-UI client.
	* vrpn_tempimager_server.cpp : Adjusted version number.

2003-10-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * edt_video_take.cpp : Added command-line option to swap every other
                line in the image to fix a bug in the EDT Pulnix driver.
        * swap_ppm_lines.cpp : Program to read in PPM file, swap every other
                line, and then write it back out again.
        * swap_ppm_lines.dsp : Project file to build it.
        * video.dsw : Adding swap_ppm_lines project.

2003-09-19  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* EDT capture to C_test_avi.GRF : Replaced with the following.
	* EDT capture to D_jcribb_data.GRF : Replaces the above.
	* EDT camera viewer.GRF : Replaced the test graph (100x100 image)
		with the running graph (connected to a camera).
	* EDT_directx_dll.cpp : Debugging messages added
	* edt_raw_video_store.cpp : Program to save raw video frames into an
		output file using the EDT sample code.
	* edt_raw_video_store.dsp : Project file for above.
	* video.dsw : Added raw video store project.

2003-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* EDT_directx_dll.cpp : Added timing information so we can store
		video files.
	* EDT_dierctx_dll.dsp : Nothing really.
	* video_spot_tracker.cpp : Comments change.

2003-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video.dsw : Adding projects for building EDT video capture
		card DirectShow source filters.
	* edt_library.dsp : Includes files from the EDT SDK.
	* EDT_directx_dll.cpp : Source code for EDT video capture.
	* EDT_directx_dll.dsp : Project file for EDT video capture.
	* EDTSource.def : Definition file for DLL build.
	* EDT camera viewer.GRF : DirectShow GraphEdit graph.
	* EDT capture to C_test_avi.GRF : DirectShow GraphEdit graph.
	* EDT_directx_dll : Directory containing installer.

2003-08-30  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.h : Speeding up bilerp function a bit.
	* spot_tracker.cpp : Speeding up tracker a bit.
	* stack_collector.cpp : Changed version number.  Adds a button
		to let the code step one past the bottom of the stack
		to make sure we collect images coming the same direction
		all the time.
	* tempimager_directx_dll.cpp : First working version.  Only works
		if the VRPN server is running when the DLL is loaded.
		Hard-wired to localhost server for now.
	* video_spot_tracker.cpp : Added non-checking versions of pixel
		reads to see if things went faster with them.  They didn't.
	* video_spot_tracker.tcl : Sets default save location to C:\.

2003-08-26  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.cpp : Moving virtual function inline to speed up
		inner loops.
	* image_wrapper.h : Same, plus tweaking the function for speed.
	* spot_tracker.cpp : Speed tweaks.  Major rework of the symmetric
		spot tracker to use pre-computed lists of positions rather
		than recomputing coordinates each frame.  This slowed it
		down until I turned the index operations into pointer++.
		Removed the broken version of the interpolating disk
		tracker.
	* spot_tracker.h : Same.
	* spot_tracker_library.dsp : Lets it inline more for speed.
	* video_spot_tracker.bat : Removes quotes that break things.
	* video_spot_tracker.cpp : Bumped version number.
	* video_spot_tracker.dsp : Lets it inline more for speed.

2003-08-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* spot_tracker.cpp : Added circularly-symmetric-locator kernel.
		Removed unused variables.
	* spot_tracker.h : Same.
	* test_spot_tracker.cpp : Added test for symmetric kernel.
	* video_spot_tracker.cpp : Added controls for symmetric kernel.
		Redid user interface layout (moved some more into the
		video_spot_tracker.tcl code).
	* video_spot_tracker.tcl : Updated user interface layout.

2003-08-20  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* Installation_README.txt : Generalizing to also work for stack.
	* stack_collector.cpp : New version number for installer release.
	* stack_collector.dsp : Probably saving browse info.
	* tempimager_directx_dll.cpp : Closer to working.
	* stack_collector : Directory for installer information.
	* video_spot_tracker : Directory for installer information.

2003-08-19  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.dsp : Lots changed, not sure why.  It seems to work.
	* video.dsw : Added build for tempimager_directx_dll project.
	* tempimager_directx_dll.cpp : Source code for a DirectShow video
		filter that will read from a VRPN connection and export
		the video from it so that it can be loaded into DirectX.
		Not yet fully tested, but I wanted to get it in here.
	* tempimager_directx_dll.dsp : Project file for same.

2003-08-15  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Making it compile with the newer libraries.
	* directx_camera_server.cpp : Fixed bug where odd-sized video
		could not be read.  Also fixed bug where leaving the
		video size on a camera unspecified resulted in no video
		coming in.
	* directx_camera_server.h : Same.
	* directx_videofile_server.cpp : Copied new code over from the
		camera server above.
	* video_spot_tracker.cpp : Bumped version, changed default res.

2003-08-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp: Returns failure when it gets a file
		with different sizes than it expects.
	* directx_videofile_server.cpp : Clean up of size calculation.
	* spot_tracker.cpp : Added a cone-kernel spot tracker for cases
		where the spot is really brighter in the center.
	* spot_tracker.h : Same.
	* test_spot_tracker.cpp : Added test for cone.
	* video_spot_tracker.cpp : New version number.  Added ability
		to select which color from an RGB input.  Added
		ability to use the cone kernel.  Antialiased the cross
		lines, so they appear in the correct location.  Set up
		initial window placement for the Tcl and Glut windows.

2003-08-07  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* image_wrapper.h : Defaults to no noise.
	* spot_tracker.cpp : Fixes bug in initialization.  Pulled many of
		the disk_spot_tracker functions into the spot_tracker base
		class.  Made a new type of disk spot tracker that interpolates
		the values between pixels in the image, which does a better
		job of matching to sub-pixel locations.  Renamed original
		version that samples within the kernel but at the original
		resolution interp2: don't use it.
	* spot_tracker.h : Same.
	* test_spot_tracker.cpp : Modified to better test the subpixel
		behavior of the interpolating tracker.
	* vidso_spot_tracker.cpp : Changed version number.
	* video_spot_tracker.dsp : Not sure what the change was.  Added /Fr
		flag.

2003-08-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Removed _vrpn_buffer and _vrpn_buffer_size
		(unused?)
	* directx_camera_server.cpp : Removed filter_state (unused).
		Made grabber callback return all of its samples and exit
		when it is time to shut down.
	* directx_camera_server.h : Same.
	* directx_videofile_server.cpp : Use Pause() rather that Stop() to
		avoid locking up the callback handler for the grabber.
	* roper_server.cpp : Removed _vrpn_buffer and _size.
	* video_spot_tracker.cpp : Changed version.  Changed where the
		coordinates are flipped so that things are in the right
		system.

2003-08-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Comment changes.
	* diaginc_server.cpp : Still trying to debug.  It seems to copy
		with a stride that is smaller than it should be, but it
		doesn't seem to duplicate pixels.
	* directx_camera_server.cpp : Returns false rather than printing
		a message when the frame times out.  Lets higher-level
		code know, so that it can deal with it.  Also makes the
		rewind button read one frame after going to beginning.
	* directx_videofile_server.cpp : Makes the rewind button take a
		single step afterwards, so the user can see the first
		frame.
	* directx_videofile_server.h : Same.
	* image_wrapper.cpp : Includes a bilinear interpolation read
		routine.
	* image_wrapper.h : Same.
	* spot_tracker.cpp : Added a base class spot tracker, and derived
		disk spot tracker from it.  Derived interpolating disk
		spot tracker from that.  Interpolating one does bilerp on
		its pixels when optimizing, to do better at subpixel
		accuracy.
	* spot_tracker.h : Same.  Plus more access functions for the
		member variables.
	* test_spot_tracker.cpp : Added more tests.  Added interp tracker.
	* video_spot_tracker.cpp : Added option to use interpolating
		disk tracker.  Added the ability to put in more than one
		spot tracker for the same image (using right mouse button).
		Created "flip_y()" utility function.  Make rewind play
		the first image in the video file.  Makes it not crash
		if you ask to overwrite a file.
	* video_spot_tracker.tcl : Added default "vrpn" extension to
		files.

2003-07-21  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Comments.
	* diaginc_server.cpp : Made the code work better than it did
		before.  It works, but has a strange subtraction of one
		line per column that I don't know why it needs.  It also
		reads the video upside-down.  Wanted to check it in because
		of the changes in the tracking program.
	* diaginc_server.h : Comments.
	* directx_camera_server.cpp : Some attempts to make this work with
		TV tuner cards.
	* roper_server.cpp : Comments.
	* video_spot_tracker.cpp : Use RGBA rather than RGB texture to
		avoid trouble with word alignment.  Also ensure that it is
		allocated on a 4-byte boundary.

2003-07-18  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Changed the code to use the callback
		mechanism from the frame capture filter rather than asking
		it for the current frame; this only processes each frame
		one time, and it set the replay rate to a maximum of the
		image-generation rate.
	* directx_camera_server.h : Same.
	* directx_videofile_server.cpp : Same.
	* directx_videofile_server.h : Same.
	* video_spot_tracker.cpp : Changed comments and version number.

2003-06-17  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Lets it compile in the new-better
		build environment where everything comes from external.

2003-06-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : File-saving dialog box to let the
		user save a log file.  Made the default spot a dark one.

2003-06-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.dsp : Changed to compile with files in new
		locations.

2003-06-12  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Made it so that if you ask for a
		video of size 0x0 it just takes whatever the default
		resolution is for the camera.
	* video_spot_tracker.cpp : Enabled the user to open directx to
		get any resolution or directx640x480 to get that specific
		resolution.  Adds a button to return it to full-screen
		video display (opposite of small_area).

2003-04-03  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Changing default exposure time to 80ms
		if we're using the SPOT camera -- this seems to be the
		minimum for our camera.
	* diaginc_server.cpp : Debugging to make it actually read an image.
		May or may not get the pixels in the right order.  May or
		may not do binning correctly (couldn't get on the microscope
		to test it).

2003-03-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Adding Diagnostics Inc. SPOT camera
		interface as a choice for the camera to use.
	* video_tempimager_server.cpp : Adding Diagnostics Inc. SPOT camera
		interface as a choice for the camera to use.
	* diaginc_server.h : Server for Diagnostics Incorporated SPOT cameras.
	* diaginc_server.cpp : Server for Diagnostics Incorporated SPOT cameras.

2003-03-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_spot_tracker.cpp : Added VRPN tracker to report position.

2003-03-06  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Declaring functions const.
	* directx_camera_server.cpp : Fixing pixel-lookup for subsetted images.
	* roper_server.cpp : Making pixel-reading work when binning.
	* spot_tracker.cpp : Changed the surround_frac to be smaller to make
		it track the center correctly.
	* stack_collector.cpp : Newline at end of file.
	* video_spot_tracker.cpp : Lots of changes.  Added mouse-based direction
		of point and radius.  Added ability to subset the display.
		Added auto-subsetting following the tracked area.  Lets you
		turn off the video display to speed things up.  Lets you
		track either dark or white spots.  Image inversion where
		needed in Y.  Debugging.  Doesn't post redisplay multiple
		times between displays.

2003-03-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * stack_collector.cpp : Made it so that you can select the region
                of interest with the mouse.  Bumped version number.

2003-03-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Adding a gain parameter when saving image.
	* roper_server.h : Same.
	* roper_server.cpp : Scales image values by gain and clips to the
		maximum value when saving.
	* stack_collecter.cpp: Added gain parameter when viewing and saving.
		Added ability to take multiple stacks.
		Changed output file to include gain and sequence #.
		Made things that should be integers truncate to do so.
		Made a new window for clipping controls.
	* video_spot_tracker.cpp : Switched to 12-bit values for Roper.

2003-02-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Fixed where the right and top lines are to
		be outside the viewed area rather than on its edge.
		Renamed the clipping controls "left, right, bottom, top."

2003-02-28  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_server.h : Makes it possible to access the buffer holding the
		image directly for faster access.
	* stack_collector.cpp : Provides an image preview window.  Debugged,
		but the final bug fix has not yet been tested (when the
		image is a subset of the whole possible image in X).
	* stack_collector.dsp : Same.

2002-11-24  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Modified to use new vrpn_TempImager class.
	* directx_camera_server.cpp : Same.  This involved removing a lot
		of code, which is now down inside the TempImager.
		Also inserted sleep to try and make it not eat the CPU.
	* directx_camera_server.h : Same.
	* roper_server.cpp : Making use the new vrpn_TempImager class.
		Not tested.
	* stack_collector.dsp : Enable building release version.
	* test_driectx_library.dsp : Same.
	* video_spot_tracker.cpp : Works with new vrpn_TempImager class.
	* video_tempimager_server.cpp : Same.  Took out unused code.

2002-11-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Increased sleep from 1 to 5 ms to increase read rate.
	* directx_camera_server.cpp : Uses a pair of buffers for the normal
		and inverted-in-y video that are swapped each time, rather
		than allocated a new buffer each time a frame needs to be
		swapped.  Twiddled with some loop code to move calculations
		outside the loops and use adds rather than multiplies within
		the loops.

2002-11-05  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Option to let the user clear the background.
	* directx_camera_server.cpp : Enables setting the video resolution.
		Prints timing information (frames/second read).
	* directx_camera_server.h : Same.
	* video_spot_tracker.cpp : Enabled hard-coding video resolution.
		It was slow when set to 640x480, so I put it back to 320x240
		until I can figure out why.
	* video_tempimager_server.cpp : Enabled setting the video resolution
		for DirectX cameras on the command line.

2002-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* argonot.cpp : Modified the gain and offset settings to be clamp
		values (matches the way the Argus system works).
		Added command-line argument to tell which device to
		connect to (default is at localhost).

2002-11-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Changing buffers from signed to
		unsigned characters to avoid sign-extension before
		sending as 16-bit values.
	* directx_camera_server.h : Same.
	* directx_videofile_server.cpp : Same.
	* video.dsw : Adding argonot program to the file.
	* argonot.cpp : Program to enable gain and contrast adjustments to
		received video images and enable background subtraction of
		the initial image (or subtraction such that the initial image
		becomes 128 everywhere).

2002-10-27  Charalampos Fretzagias <fretzagi@cs.unc.edu>

	* base_camera_server.h : Added send_vrpn_image. This makes
		base_camera_server depend on vrpn, but does wonders for
		the speed of the server. Also removed allocation of
		memory while in the mainloop of the server; all memory
		needed is allocated just once and reused until camera
		objects are destrocted.
	* directx_camera_server.h : Same as above.
	* roper_server.h : Same as above.
	* directx_camera_server.cpp : implementation of send_vrpn_image
	* roper_server.cpp : implementation of send_vrpn_image
	* video_tempimager_server.cpp : replaced the calls to the two
		mainloop functions with a call to send_vrpn_image in the
		mainloop of the server.

2002-10-27  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : White space adjust.
	* roper_server.cpp : Added code to read from the Roper in continuous
		mode rather than one frame at a time; this code doesn't work
		(and neither does the example code on which it is based, it
		turns out), so this is not yet enabled.  Also optimized to
		only do open/close code at the beginning and end, not every
		frame (which sped it up marginally).
	* roper_server.h : Same.
	* roper_example.cpp : Test program from Roper manual (turns out not
		to work!)
	* roper_example.dsp : Build file for this.
	* video.dsw : Added a Roper test program.
	* video_tempimager_server.cpp : Added comments.  Changed white space.
		Moved signal handler installation to another location.

2002-10-23  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* directx_camera_server.cpp : Swap Red and Blue to the correct order.

2002-10-14  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* base_camera_server.h : Added concept of binning.
				 Changed coordinates to unsigned from int.
				 Removed un-needed function prototypes.
	* directx_camera_server.cpp : Added debugging information.
				      Added check and new print for failure.
				      Clarified that exposure is in milliseconds.
				      Changed ints to unsigneds for coordinates.
	* directx_videofile_server.cpp : Added the filter graph to the object
		table so that DirectX graph editor can edit it.  Helpful when
		debugging failure to play some video files.  Still debugging
		that...  Trying to do single-step through video files, but can't
		get interface (other example code can...)
	* roper_server.cpp : Added support for binning.
	* video_tempimager_server.cpp : Added command-line options for exposure
		and binning, and which camera to use.

2002-10-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* roper_server.cpp : Changes to make it work now that it is derived from
		the base camera class.
	* roper_server.h : Same.
	* video_spot_tracker.cpp : Extra debugging print.
	* video_tempimager_server.cpp : Can tell which of several cameras of the
		same type you want to start.  On the command line, you tell it
		the type of device and which to use.

2002-10-10  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * base_camera_server.h : Adds parameter to PPM write for 16-bit files.
        * directx_camera_server.cpp : Adds 16-bit PPM write.
                Adds the ability to pause the video (mostly for use by the derived
                class that reads from stored video files).
        * directx_camera_server.h : Same.
        * directx_videofile_server.cpp : Trying to make it work better.  It still
                skips to the end of the file when you pause.  Some streams still
                don't play past the first frame.
        * directx_videofile_server.h : Adds controls for play, rewind, pause.
        * roper_server.cpp : Adds 16-bit write for PPM files.
                Renames parameter to make sure milliseconds is explicit.
        * roper_server.h : Same.
        * spot_tracker.cpp : Adds routine to optimize in X,Y but not radius.
        * spot_tracker.h : Same.
        * stack_collector.cpp : Adds "Sixteen bits" button for image collection.
                Stops the stack in the middle if "snap" unchecked or "quit".
        * video_spot_tracker.cpp : 
                Adds play/rewind buttons for when open a video file.
        * test_directx_library.cpp : New constructor parameter.
        * video_tempimager_server.cpp : New constructor parameter.

2002-09-13  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* stack_collector.cpp : Modified to use new vrpn_Analog_Output.  Not tested.

2002-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* video_tempimager_server.cpp : First-pass server to send video.
	* video_tempimager_server.dsp : Built file for same.
	* base_camera_server.h : Debugging and features for tempimager_server.
	* directx_camera_server.h : Same.
	* directx_camera_server.cpp : Same.
	* roper_server.h : Same.
	* roper_server.cpp : Same.
	* test_directx_library.cpp : Saves a bunch of images now.
	* video.dsw : Added build file above.

2002-09-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

        * base_camera_server.h : Base for Roper and DirectX video inputs.
	* directx_camera_server.h : DirectX video input class.
	* directx_camera_server.cpp : Same.
	* test_directx_library.cpp : Test program for above.
	* test_directx_library.dsp : Build for test program
	* roper_server.h : Modified to depend on base class.
	* roper_server.cpp : Same.
	* roper_library.dsp : Builds library for inclusion in multiple apps.
	* video.dsw : Dependency changes and new projects.

